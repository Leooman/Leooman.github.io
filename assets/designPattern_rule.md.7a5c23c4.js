import{_ as e,c as n,o as s,b as t}from"./app.7e9b90cf.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"designPattern/rule.md"}'),o={name:"designPattern/rule.md"},l=t("p",null,"设计原则通常指的是单一职责原则、里氏替换原则、依赖倒置原则、接口隔离原则、合成复用原则和最少知识原则",-1),_=t("ul",null,[t("li",null,"单一职责原则")],-1),c=t("p",null,"就一个类而言，应该仅有一个引起它变化的原因。单一职责原则（SRP）的职责被定义为“引起变化的原因”。",-1),a=t("p",null,"如果我们有两个动机去改写一个方法，那么这个方法就具有两个职责。每个职责都是变化的一个轴线，如果一个方法 承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。",-1),r=t("p",null,"SRP原则体现为：一个对象（方法）只做一件事情",-1),i=t("p",null,"SRP原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。 但SRP原则也有一些缺点，最明显的是会增加编写代码的复杂度。当我们按照职责把对象分解成更小的粒度之后，实际上也增大了这些对象之间相互联系的难度",-1),d=t("ul",null,[t("li",null,"最少知识原则")],-1),u=t("p",null,"最少知识原则（LKP）说的是一个软件实体应当尽可能少地与其他实体发生相互作用",-1),p=[l,_,c,a,r,i,d,u];function h(m,P,f,S,R,$){return s(),n("div",null,p)}const B=e(o,[["render",h]]);export{x as __pageData,B as default};
