import{_ as e,c as t,o as i,a as o}from"./app.2f36bf42.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"原型与原型链","slug":"原型与原型链","link":"#原型与原型链","children":[{"level":4,"title":"什么是原型","slug":"什么是原型","link":"#什么是原型","children":[]},{"level":4,"title":"原型的扩展","slug":"原型的扩展","link":"#原型的扩展","children":[]},{"level":4,"title":"原型链","slug":"原型链","link":"#原型链","children":[]}]}],"relativePath":"js/prototype.md"}'),r={name:"js/prototype.md"},l=o('<h3 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-hidden="true">#</a></h3><h4 id="什么是原型" tabindex="-1">什么是原型 <a class="header-anchor" href="#什么是原型" aria-hidden="true">#</a></h4><p>1、prototype本质上还是一个JavaScript对象； 2、每个函数都有一个默认的prototype属性； 3、通过prototype我们可以扩展Javascript的内建对象</p><h4 id="原型的扩展" tabindex="-1">原型的扩展 <a class="header-anchor" href="#原型的扩展" aria-hidden="true">#</a></h4><ul><li>所有函数都有一个特别的属性：prototype显式原型属性（只有函数有prototype，对象是没有的。）；</li><li>所有实例对象都有一个特别的属性：<code>__proto__</code>隐式原型属性；</li><li>原型是用于保存对象的共享属性和方法的，原型的属性和方法并不会影响函数本身的属性和方法。</li><li>显式原型<code>prototype</code>与隐式原型<code>__proto__</code>的关系 <ul><li>函数的prototype：定义函数时被自动赋值，值默认为{}，即原型对象；</li><li>实例对象的<code>_proto_</code>: 在创建实例对象时被自动添加, 并赋值为构造函数的prototype值；</li><li>原型对象即为当前实例对象的父对象；</li></ul></li></ul><h4 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-hidden="true">#</a></h4><ul><li>所有的实例对象都有__proto__属性, 它指向的就是原型对象</li><li>这样通过__proto__属性就形成了一个链的结构----&gt;原型链；</li><li>当查找对象内部的属性/方法时, js引擎自动沿着这个原型链查找；</li><li>当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作；</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/4/15/16a1fb9cb2f12f3e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="原型链图"></p><p><img src="https://user-gold-cdn.xitu.io/2019/4/15/16a1fe8d029a3156?imageslim" alt="原型链"></p><p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型</p><p>对象的内部指针。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的</p><p>原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数</p><p>的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实</p><p>例与原型的链条。这就是所谓原型链的基本概念。</p>',14),a=[l];function p(d,c,_,s,n,h){return i(),t("div",null,a)}const m=e(r,[["render",p]]);export{f as __pageData,m as default};
