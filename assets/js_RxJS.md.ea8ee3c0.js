import{_ as e,c as a,o as r,a as s}from"./app.2bd77815.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Promise","slug":"promise","link":"#promise","children":[]},{"level":2,"title":"RxJS","slug":"rxjs","link":"#rxjs","children":[]},{"level":2,"title":"RxJS advantage","slug":"rxjs-advantage","link":"#rxjs-advantage","children":[]}],"relativePath":"js/RxJS.md"}'),t={name:"js/RxJS.md"},l=s('<h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-hidden="true">#</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise</a> 解决了回调地狱问题，但其本身有局限性 <img src="http://qiniu.leooman.com/angular/rxjs/rxjs_002.jpg" alt="Promise" style="zoom:50%;"></p><h2 id="rxjs" tabindex="-1">RxJS <a class="header-anchor" href="#rxjs" aria-hidden="true">#</a></h2><p><a href="http://reactivex.io/rxjs/" target="_blank" rel="noreferrer">RxJS</a>(<span style="color:#f00;">R</span>eactive e<span style="color:#f00;">x</span>tensions for <span style="color:#f00;">J</span>ava<span style="color:#f00;">S</span>cript)</p><p>结合了 观察者模式、迭代器模式 和 函数式编程将异步抽象为数据流并提供对数据流进行各种操作的接口.</p><ul><li><p>Observable（可观察对象） 将异步数据转化为数据流，或者生成自定义数据流</p></li><li><p>Operators（操作符） 函数式编程风格的纯函数对数据流的中间处理过程</p></li><li><p>Observer（观察者） 接收数据流中的数据，作为数据的消费者处理数据 <img src="http://qiniu.leooman.com/angular/rxjs/rxjs_004.jpg" alt="数据处理流程" style="zoom:50%;"></p></li><li><p>Subject（主体） 同时继承Observable和Observer，既能包装异步数据为数据流，也能作为消费者处理数据</p><p>the only way of multicasting a value or event to multiple Observers</p><img src="http://qiniu.leooman.com/angular/rxjs/rxjs_005.jpg" alt="Subject" style="zoom:50%;"></li><li><p>Scheduler（调度器） 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调</p></li></ul><h2 id="rxjs-advantage" tabindex="-1">RxJS advantage <a class="header-anchor" href="#rxjs-advantage" aria-hidden="true">#</a></h2><ul><li>解决了Promise的痛点 <img src="http://qiniu.leooman.com/angular/rxjs/rxjs_006.jpg" alt="相对Promise的优势" style="zoom:50%;"></li><li>支持流组合处理数据 <img src="http://qiniu.leooman.com/angular/rxjs/rxjs_007.jpg" alt="支持流组合" style="zoom:50%;"></li></ul>',8),o=[l];function i(n,p,c,m,d,h){return r(),a("div",null,o)}const u=e(t,[["render",i]]);export{_ as __pageData,u as default};
