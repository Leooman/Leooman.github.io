import{_ as s,c as a,o as n,a as l}from"./app.2bd77815.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Array.prototype.reduce(callbackfn[, initialValue])","slug":"array-prototype-reduce-callbackfn-initialvalue","link":"#array-prototype-reduce-callbackfn-initialvalue","children":[]}],"relativePath":"js/array.prototype.reduce.md"}'),e={name:"js/array.prototype.reduce.md"},p=l(`<h2 id="array-prototype-reduce-callbackfn-initialvalue" tabindex="-1">Array.prototype.reduce(callbackfn[, initialValue]) <a class="header-anchor" href="#array-prototype-reduce-callbackfn-initialvalue" aria-hidden="true">#</a></h2><p><em>callbackfn</em> should be a function that takes four arguments. <strong>reduce</strong> calls the callback, as a function, once for each element after the first element present in the array, in ascending order.</p><p><em>callbackfn</em> is called with four arguments: the <em>previousValue</em> (value from the previous call to <em>callbackfn</em>), the <em>currentValue</em> (value of the current element), the <em>currentIndex</em>, and the object being traversed.</p><p>The first time that callback is called, the <em>previousValue</em> and <em>currentValue</em> can be one of two values. If an <em>initialValue</em> was supplied in the call to <strong>reduce</strong>, then <em>previousValue</em> will be equal to <em>initialValue</em> and <em>currentValue</em> will be equal to the first value in the array. If no <em>initialValue</em> was supplied, then <em>previousValue</em> will be equal to the first value in the array and <em>currentValue</em> will be equal to the second. It is a <strong>TypeError</strong> if the array contains no elements and <em>initialValue</em> is not provided.</p><p><strong>reduce</strong> does not directly mutate the object on which it is called but the object may be mutated by the calls to <em>callbackfn</em>.</p><p>The range of elements processed by <strong>reduce</strong> is set before the first call to <em>callbackfn</em>. Elements that are appended to the array after the call to <strong>reduce</strong> begins will not be visited by <em>callbackfn</em>. If existing elements of the array are changed, their value as passed to <em>callbackfn</em> will be the value at the time <strong>reduce</strong> visits them; elements that are deleted after the call to <strong>reduce</strong> begins and before being visited are not visited.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">When the reduce method is called with one or two arguments, the following steps are taken:</span></span>
<span class="line"><span style="color:#A6ACCD;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#A6ACCD;">2. Let len be ? ToLength(? Get(O, &quot;length&quot;)).</span></span>
<span class="line"><span style="color:#A6ACCD;">3. If IsCallable(callbackfn) is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#A6ACCD;">4. If len is 0 and initialValue is not present, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#A6ACCD;">5. Let k be 0.</span></span>
<span class="line"><span style="color:#A6ACCD;">6. Let accumulator be undefined. </span></span>
<span class="line"><span style="color:#A6ACCD;">7. If initialValue is present, then</span></span>
<span class="line"><span style="color:#A6ACCD;">	a. Set accumulator to initialValue. </span></span>
<span class="line"><span style="color:#A6ACCD;">8. Else initialValue is not present,</span></span>
<span class="line"><span style="color:#A6ACCD;">	a. Let kPresent be false. </span></span>
<span class="line"><span style="color:#A6ACCD;">	b. Repeat, while kPresent is false and k &lt; len</span></span>
<span class="line"><span style="color:#A6ACCD;">		i. Let Pk be ! ToString(k).</span></span>
<span class="line"><span style="color:#A6ACCD;">		ii. Set kPresent to ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#A6ACCD;">		iii. If kPresent is true, then</span></span>
<span class="line"><span style="color:#A6ACCD;">			1. Set accumulator to ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#A6ACCD;">		iv. Increase k by 1.</span></span>
<span class="line"><span style="color:#A6ACCD;">	c. If kPresent is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#A6ACCD;">9. Repeat, while k &lt; len</span></span>
<span class="line"><span style="color:#A6ACCD;">	a. Let Pk be ! ToString(k).</span></span>
<span class="line"><span style="color:#A6ACCD;">	b. Let kPresent be ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#A6ACCD;">	c. If kPresent is true, then</span></span>
<span class="line"><span style="color:#A6ACCD;">		i. Let kValue be ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#A6ACCD;">		ii. Set accumulator to ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).</span></span>
<span class="line"><span style="color:#A6ACCD;">	d. Increase k by 1.</span></span>
<span class="line"><span style="color:#A6ACCD;">10. Return accumulator.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">callbackfn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">initialValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 异常处理</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  	</span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">TypeError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Cannot read property &#39;map&#39; of null or undefined</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callbackfn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">TypeError</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">callbackfn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> is not a function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">O</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">O</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">accumulator</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">initialValue</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">accumulator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">initialValue</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">TypeError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Reduce of empty array with no initial value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kPresent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">kPresent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">kPresent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">O</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">kPresent</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">accumulator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">O</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;">] </span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">O</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">O</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">accumulator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callbackfn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">undefined,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">accumulator</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kValue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">O</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">accumulator</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,8),o=[p];function t(c,r,y,F,i,D){return n(),a("div",null,o)}const u=s(e,[["render",t]]);export{A as __pageData,u as default};
